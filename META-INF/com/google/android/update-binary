#!/sbin/sh
# AnyKernel2 Backend
# osm0sis @ xda-developers

OUTFD=/proc/self/fd/$2;
ZIPFILE="$3";
DIR=`dirname "$ZIPFILE"`;

ui_print() {
  until [ ! "$1" ]; do
    echo -e "ui_print $1\nui_print" > $OUTFD;
    shift;
  done;
}
show_progress() { echo "progress $1 $2" > $OUTFD; }
file_getprop() { $bb grep "^$2=" "$1" | $bb cut -d= -f2; }
cleanup() { rm -rf /tmp/anykernel; }
debugging() {
  case $(basename "$ZIPFILE" .zip) in
    *-debugging)
      ui_print " ";
      ui_print "Creating debugging archive in zip directory...";
      $bb tar -czvf "$DIR/anykernel2-$(date +%Y-%m-%d_%H%M%S)-debug.tgz" /tmp/*;
    ;;
  esac;
}
unmount_all() {
  (umount /system;
  if [ -d /system_root -a ! -f /system/build.prop ]; then
    umount /system_root;
  fi;
  umount /system;
  umount /vendor;
  umount /data) 2>/dev/null;
}
abort() {
  ui_print "$*";
  debugging;
  if [ ! -f /tmp/anykernel/anykernel.sh -o "$(file_getprop /tmp/anykernel/anykernel.sh do.cleanuponabort 2>/dev/null)" == 1 ]; then
    cleanup;
  fi;
  unmount_all;
  exit 1;
}

show_progress 1.34 4;
ui_print " ";
cleanup;
mkdir -p /tmp/anykernel/bin;
cd /tmp/anykernel;
unzip -o "$ZIPFILE";
if [ $? != 0 -o -z "$(ls /tmp/anykernel/tools)" ]; then
  abort "Unzip failed. Aborting...";
fi;
bb=/tmp/anykernel/tools/busybox;
chmod 755 $bb;
$bb chmod -R 755 /tmp/anykernel/tools /tmp/anykernel/bin;

if [ -f /tmp/anykernel/banner ]; then
  while IFS='' read -r line || $bb [[ -n "$line" ]]; do
    ui_print "$line";
  done < /tmp/anykernel/banner;
  ui_print " ";
  ui_print " ";
fi;

ui_print "$(file_getprop /tmp/anykernel/anykernel.sh kernel.string)";
if [ -f /tmp/anykernel/version ]; then
  ui_print " ";
  while IFS='' read -r line || $bb [[ -n "$line" ]]; do
    ui_print "$line";
  done < /tmp/anykernel/version;
  ui_print " ";
fi;
ui_print " ";
ui_print "AnyKernel2 by osm0sis @ xda-developers";
ui_print " ";
ui_print "compiled by eremitein@xda / zerovoid@4pda";
ui_print " ";

unmount_all;
$bb mount -o ro -t auto /system;
$bb mount -o ro -t auto /vendor 2>/dev/null;
$bb mount /data 2>/dev/null;
if [ -f /system/system/build.prop ]; then
  umount /system;
  umount /system 2>/dev/null;
  mkdir /system_root 2>/dev/null;
  $bb mount -o ro -t auto /dev/block/bootdevice/by-name/system /system_root;
  $bb mount -o bind /system_root/system /system;
  unset root;
fi;
savedpath="$LD_LIBRARY_PATH";
savedpre="$LD_PRELOAD";
unset LD_LIBRARY_PATH;
unset LD_PRELOAD;

if [ ! "$(getprop 2>/dev/null)" ]; then
  getprop() {
    local propval="$(file_getprop /default.prop $1 2>/dev/null)";
    test "$propval" || local propval="$(file_getprop /system/build.prop $1 2>/dev/null)";
    test "$propval" && echo "$propval" || echo "";
  }
elif [ ! "$(getprop ro.product.device 2>/dev/null)" -a ! "$(getprop ro.build.product 2>/dev/null)" ]; then
  getprop() {
    ($(which getprop) | $bb grep "$1" | $bb cut -d[ -f3 | $bb cut -d] -f1) 2>/dev/null;
  }
fi;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.devicecheck)" == 1 ]; then
  ui_print "Checking device...";
  device="$(getprop ro.product.device)";
  product="$(getprop ro.build.product)";
  for testname in $(file_getprop /tmp/anykernel/anykernel.sh 'device.name.*'); do
    test "$testname" || break;
    if [ "$device" == "$testname" -o "$product" == "$testname" ]; then
      ui_print "$testname";
      match=1;
      break;
    fi;
  done;
  ui_print " ";
  if [ "$match" != 1 ]; then
    abort "Unsupported device. Aborting...";
  fi;
fi;

ui_print "Installing...";
for i in $($bb --list); do
  $bb ln -s $bb /tmp/anykernel/bin/$i;
done;
if [ $? != 0 -o -z "$(ls /tmp/anykernel/bin)" ]; then
  abort "Recovery busybox setup failed. Aborting...";
fi;
PATH="/tmp/anykernel/bin:$PATH" $bb ash /tmp/anykernel/anykernel.sh $2;
if [ $? != "0" ]; then
  abort;
fi;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.modules)" == 1 ]; then
  ui_print " ";
  ui_print "Pushing modules...";
  $bb mount -o rw,remount -t auto /system;
  $bb mount -o rw,remount -t auto /vendor 2>/dev/null;
  cd /tmp/anykernel/modules;
  for module in $(find . -name '*.ko'); do
    if [ ! -e /$module ]; then
      case $module in
        */vendor/*) mod=vendor;;
        *) mod=system;;
      esac;
    fi;
    if [ "$($bb mount | $bb grep " $(echo $module | $bb cut -c2-) ")" ]; then
      $bb mount -o rw,remount -t auto /$module;
    fi;
    mkdir -p $(dirname /$module);
    $bb cp -vrLf $module /$module;
    $bb chown 0:0 /$module;
    $bb chmod 644 /$module;
    if [ "$mod" ]; then
      chcon -v "u:object_r:${mod}_file:s0" /$module;
    fi;
    if [ "$($bb mount | $bb grep " $(echo $module | $bb cut -c2-) ")" ]; then
      $bb mount -o ro,remount -t auto /$module;
    fi;
  done;
  #fixing wifi (by eremitein@xda)
  chcon -v "u:object_r:vendor_file:s0" /vendor/lib/modules/pronto/pronto_wlan.ko;
  #for custom roms
  mv -v /system/lib/modules/wlan.ko /system/lib/modules/originwlan.ko;
  rm /system/lib/modules/pronto_wlan.ko;
  #fixdone
  #fix hardcoded values in vendor
  if [ ! -r /vendor/bin/init.qcom.post_boot.sh_orig ]; then
    mv /vendor/bin/init.qcom.post_boot.sh /vendor/bin/init.qcom.post_boot.sh_orig;
  fi
  if [ ! $(grep 'treble_' /system/build.prop) ]; then
    cat /tmp/anykernel/init.qcom.post_boot.sh > /vendor/bin/init.qcom.post_boot.sh;
  else
    cat /tmp/anykernel/init.qcom.post_boot.sh > /system/etc/init.d/zero.sh;
  fi;
  chmod 755 /system/etc/init.d/zero.sh /vendor/bin/init.qcom.post_boot.sh;
  #fix for visual effects
  if [ ! $(grep DLMI /system/build.prop) ]; then
    if [ ! $(grep '#visual_tweak' /system/build.prop) ]; then
      cat /tmp/anykernel/visual.prop >> /system/build.prop;
    fi;
  fi;
  #fixdone
  #fix for fp gestures
  cat /tmp/anykernel/input > /system/usr/keylayout/uinput-fpc.kl
  cat /tmp/anykernel/input > /system/usr/keylayout/uinput-goodix.kl
  #fixdone
  cd /tmp/anykernel;
  $bb mount -o ro,remount -t auto /system;
  $bb mount -o ro,remount -t auto /vendor 2>/dev/null;
fi;

debugging;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.cleanup)" == 1 ]; then
  cleanup;
fi;

test "$savedpath" && export LD_LIBRARY_PATH="$savedpath";
test "$savedpre" && export LD_PRELOAD="$savedpre";

unmount_all;

ui_print " ";
ui_print " ";
ui_print "Done!";
